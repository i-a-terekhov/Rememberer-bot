[ожидание]
[готово]
[удален]

    1) В kvazi_db определяем заново структуры all_tasks и rooms_settings по новым стандартам:
[готово] - дублирование одной задачи, если отслеживающих несколько
[готово] - вместо 'telegram_id исполнителя' ник исполнителя при регистрации в боте
[готово] - в модуле main_objects параллельно изменить классы. В частности, класс Tasks - под работу со словарем, формируемом в
            модуле kvazi_db
[готово] - 'list_of_recipients' лишнее (будет определяться через структуру)

    2) В kvazi_db:
[удален] - создаем генераторы для формирования all_tasks и rooms_settings
[готово] - создаем временный словарь all_tasks

    2) В main_cash_objects:
[готово] - создать генератор для добавления случайных задач в all_tasks

    3) В модуле  kvazi_db:
[ожидание] - определить необходимость переменных configurate и users ввиду нового стандарта

    4) Модуль main_objects содержит классы главных объектов: all_tasks и rooms_settings. Экземпляры данных классов
    по сути являются кэшем, получая сохраненные данные в БД, изменяя их согласно запросам пользователей.
    Необходимо:
[ожидание] - переписать класс TasksCash, добавляя описание к функциям
[ожидание] - переписать класс RoomType, добавляя описание к функциям

    5) В main_bot_functions переписать функции:
[готово] - going_through_all_tasks
[удален] - _form_task_message_for_show
[готово] - send_message_with_bottoms
[готово] - going_through_all_tasks - выявлено некорректное обращение к элементам словаря
[готово] - в going_through_all_tasks добавить проверку на существование юзера, потому что проверка в функциях
    формирования сообщений будет дублированием кода
[готово] - в send_message_with_bottoms удаляем проверку юзера на существование

    6) В main_bot_functions написать функции:
[готово] - send_message_with_bottoms

    6) В main_bot_functions переписать функцию going_through_all_tasks таким образом, чтобы она отправляла сообщение
    о группе (если в этой группе есть задача для юзера) и все доступные в группе задачи с указанием прогресса
[готово] - сабж

    6) В main_cash_functions в функции get_mails привести формирующую структуру к шаблону (в листе каждого юзера
    должны перечислятся номера задач, без текста)
[готово] - сабж

    6) В main_bot_functions переписать функцию, ввиду изменения структуры отправки. Текст задач из каждой комнаты
    должен представлять отдельное сообщение с наименованием комнаты и перечислением задач (с указанием
    прогресса и ответственного)
[готово] - _form_task_message_for_show

    7) В main_bot_functions написать функцию send_menu для отправки сообщения с меню (отправить таск в группу,
    в каких группах состоит юзер, какие роли имеет, изменить настройки комнаты)
[готово] - сабж
[готово] - встроить сабж в логику рассылки: вначале юзер получает все сообщения из комнат, затем сообщение с меню
[ожидание] - в going_through_all_tasks оценить жизненный цикл данных в unic_users_with_tasks: как быстро устаревают,
    можно ли их использовать после рассылки.

    8) Продумать логику работы бота:
[готово] - выбрать формат общей рассылки (всех комнат сразу, где хранятся настройки общей рассылки, способ
    изменения настроек), механизм удаления неактуальных сообщений
Решение: необходимо организовать словарь, где ключами будут временные метки напоминаний, а значениями один
    или несколько юзеров, которым необходимо выслать полный перечень задач, удалим все предыдущие сообщения (полный
    перечень задач с прошлой рассылки и сообщения о внесенных изменениях).
[готово] - создать описанную структуру в kvazi_db
[готово] - в main_cash_objects создать класс TimeToMail для работы с timestamps_for_standard_mailings
[готово] - создать функцию проверки входящих данных под формат TimeToMail.timestamps_for_standard_mailings
[готово] - создать функцию вставки новых временных меток в буфер TimeToMail.timestamps
[готово] - создать функцию перевода текстовой даты в обычную
[готово] - создать функцию перевода обычной даты в текстовую
[готово] - создать функцию обхода структуры временных меток для "стандартной рассылки"
[готово] - изменить функцию sending_standard_mailings под функционал формирования словаря, по которому будет рассылка
[готово] - создать функцию отправки сообщений по словарю из form_dict_for_mailings
[готово] - удалить sending_for_standard_mailings
[готово] - функцию send_message_with_bottoms убрать из send_mailings, функцию "продвижения" задач переместить в меню

В keyboards.inline:
[готово] - добавить функцию отправки сообщения с кнопками в несколько рядов ([(tuple), (tuple)], [(tuple),)

В main_cash_objects:
[готово] - изменить функцию get_mails под возможность выгружать рассылку под определенных юзеров

9) Продумать формат отображения стандартной рассылки:
[ожидание] - Оценить необходимость внедрения меню с настройками каждого юзера, с заменой на состояние при котором
    задачи будут отображаться тем или иным образом. Изменение "состояния отображения" с помощью кнопок меню, хранение
    в словаре пользователей. При этом как-то должны отображаться изменения в задачах: появление/завершение, изменение.
    Так же нужно понимать методику оповещения о задачах, в которых юзер не является ответственным.
Решение:
    9.1) Необходима таблица в БД с полями telegram_id, nickname, observ_status:
[ожидание] - создать метод инициализации таблицы users
    9.2) Создать методы работы с таблицей users в новом модуле работы с db:
[ожидание] - сделать метод проверки наличия юзера в БД
[ожидание] - сделать метод записи юзера в БД (telegram_id, nickname)
[ожидание] - сделать метод извлечения значений "состояния отображения"
[ожидание] - сделать метод извлечения ника из БД
[ожидание] - сделать метод изменения "состояния отображения"
    9.3) Внедрить FSM для хранения "состояний отображения" рассылок:
[ожидание] - в разработке



10) Выбрать вариант работы так называемого буфера в kvazi_db:
[готово] - Первый вариант. Актуальные данные находятся в БД, при необходимости выгрузки идет запрос к БД на
    ограниченное число строк из которого формируется одноразовый словарь для последующей рассылки пользователям.
    Вариант второй. Вся работа с данными происходит в словаре, обновления которого периодически (раз в 5-10 сек)
    сохраняются в БД.
Решение: первый вариант. Для низконагруженного приложения не актуально пытаться повысить быстродействие за счет
    буфера в оперативной памяти, с учетом необходимости более сложных методов "обслуживания" такой системы
    (учет изменений в буфере, синхронизация изменений в БД)


11) Продумать необходимость рассылки отдельных задач.
[ожидание] - Имеется ли противоречие между рассылками отдельных задач и целью бота - давать краткую справку
    о невыполненных задачах
Решение:


В main_bot_functions:
[ожидание] - создать функцию sending_standard_mailings для отправки стандартной рассылки по времени
[ожидание] - написать функцию создания словаря с тасками для конкретного юзера, разбитыми по комнатам
[ожидание] - написать функцию отправки сообщений по словарю, получаемому в предыдущей таске


[ожидание] - создать подобную структуру в kvazi_db для временных меток отдельных задач
[ожидание] - в main_cash_objects создать класс UnicTimeToMail для работы с UnicTimeToMail.timestamps_for_unic_mailings
[ожидание] - создать функцию вставки новых временных меток в буфер UnicTimeToMail.timestamps_for_unic_mailings
[ожидание] - создать функцию обхода структуры временных меток для UnicTimeToMail.timestamps_for_unic_mailings

[ожидание] - создать структуру хранения id сообщений "к удалению" для каждого юзера,
    если пользователь поставил уведомление.
[ожидание] - создать функцию удаления сообщений по списку id в каждом чате


[готово] - выбрать способ оповещения об изменениях в задачах (появление новой задачи, изменение статуса,
    подтверждение руководителем), удаление неактуальных сообщений
[ожидание] - будет функция получения среза БД по юзеру.

[ожидание] - продумать способ формирования ответа на кнопки меню, учитывая, что нажатие может происходить гораздо
    позднее полученного меню.


    10) В start_dialogue переписать хэндлеры:
[готово] - start_dialogue
[готово] - ask_for_rooms_name
[ожидание] - check_old_room_name
[ожидание] - check_old_room_password
[ожидание] - make_room_with_current_name
[ожидание] - save_password_for_new_room
[ожидание] - ask_for_new_rooms_name
[ожидание] - check_new_room_name

    11) В kvazi_db:
- создать временный словарь users для сохранения юзеров (и их публичного имени, и имени их приватной группы)


    12) В kvazi_db добавить функции взаимодействия с БД:
[ожидание] - чтение БД в буфер all_tasks
[ожидание] - запись буфера в БД
[ожидание] - извлечение из БД записей по фильтру имени
[ожидание] - извлечение из БД записей по фильтру группы
[ожидание] - удаление из БД записей с истекшим сроком
[ожидание] - удаление из БД одной задачи по номеру
[ожидание] - удаление из БД записей по фильтру имени и группы (когда человек удаляется из группы)
[ожидание] - создание в БД записей для нового человека в группе